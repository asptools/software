#define YY_CHAR char
#line 1 "/usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
/* #include <osfcn.h> */
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "pddl2.lex"
#define INITIAL 0
#define YY_PDDL_Scanner_FLEX_SCANNER
/* CHAR [a-zA-Z_] */
#include "scanner.h"
#line 37 "pddl2.lex"
#line 196 "/usr/local/lib/flexskel.cc"

#define yy___stderr YY_PDDL_Scanner_ERRFILE
#define yy___text YY_PDDL_Scanner_TEXT
#define yy___leng YY_PDDL_Scanner_LENG
#define yy___in YY_PDDL_Scanner_IN
#define yy___out YY_PDDL_Scanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in ); \
		YY_PDDL_Scanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_PDDL_Scanner_DEBUG != 0
#define yy___flex_debug YY_PDDL_Scanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_PDDL_Scanner_ECHO
#define yy___input YY_PDDL_Scanner_INPUT
#define yy___fatal_error YY_PDDL_Scanner_FATAL_ERROR
#define yy___wrap YY_PDDL_Scanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_PDDL_Scanner_IFILE  *yy_input_file;

    YY_PDDL_Scanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_PDDL_Scanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_PDDL_Scanner_DEBUG != 0
int YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_PDDL_Scanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_PDDL_Scanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_PDDL_Scanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_PDDL_Scanner_CHAR *yy___text;
int yy___leng;

YY_PDDL_Scanner_IFILE  *yy___in = (YY_PDDL_Scanner_IFILE  *) 0;
YY_PDDL_Scanner_OFILE *yy___out = (YY_PDDL_Scanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_PDDL_Scanner_CHAR *yy_c_buf_p = (YY_PDDL_Scanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_PDDL_Scanner_ECHO_NOCODE
void YY_PDDL_Scanner_CLASS::yy___echo()
{YY_PDDL_Scanner_ECHO_CODE
}
#endif
#ifndef YY_PDDL_Scanner_INPUT_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_PDDL_Scanner_INPUT_CODE
}
#endif
#ifndef YY_PDDL_Scanner_FATAL_ERROR_NOCODE
void YY_PDDL_Scanner_CLASS::yy___fatal_error(char *msg)
{YY_PDDL_Scanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_PDDL_Scanner_WRAP_NOCODE
int  YY_PDDL_Scanner_CLASS::yy___wrap()
{YY_PDDL_Scanner_WRAP_CODE
}
#endif
void YY_PDDL_Scanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_PDDL_Scanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_PDDL_Scanner_DEBUG != 0
 YY_PDDL_Scanner_DEBUG_FLAG=YY_PDDL_Scanner_DEBUG_INIT;
#endif
}

YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CLASS(YY_PDDL_Scanner_CONSTRUCTOR_PARAM) YY_PDDL_Scanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_PDDL_Scanner_CONSTRUCTOR_CODE;
}
YY_PDDL_Scanner_CLASS::~YY_PDDL_Scanner_CLASS() 
{YY_PDDL_Scanner_DESTRUCTOR_CODE;
 if(YY_PDDL_Scanner_CURRENT_BUFFER)
  YY_PDDL_Scanner_DELETE_BUFFER(YY_PDDL_Scanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 119
typedef int yy_state_type;
static const short int yy_accept[554] =
    {   0,
      116,  116,  119,  118,    1,    3,  118,  118,    5,    6,
       11,    9,   10,   12,  116,   17,    2,   15,   19,   13,
      118,    7,    8,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,    1,    0,
        4,    0,   18,  116,  117,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,    2,   16,   14,  113,  113,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       44,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,    4,  117,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  113,  113,  113,
      115,   43,  115,    0,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   48,  115,  115,  115,  115,  115,
       49,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  101,  114,  114,
      114,  114,  114,   78,  114,   77,  114,  114,  100,  114,

      114,  114,  114,  114,  114,  102,   82,  114,  114,  114,
      113,  115,  115,    0,    0,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,   50,
      115,   52,  115,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,   96,  114,  114,   58,  114,   57,
      114,  114,   84,  114,  114,   81,  114,  114,   98,  114,
      114,  114,  114,  114,  114,  114,   83,   85,  113,  115,
      115,    0,    0,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   51,  115,   47,  115,  115,  115,  115,  115,

        0,  115,  115,  115,   95,  115,  115,  115,  115,  114,
       97,  114,  114,  114,  114,  114,  114,  114,   29,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,   41,   24,  113,  107,
       74,   35,    0,  115,  115,   73,  115,   25,   26,   53,
      115,   45,   46,  115,  115,  115,  115,   75,    0,  115,
      115,  115,  115,  115,  115,  103,   27,  114,  114,  114,
      114,  114,   55,  114,   37,  114,  114,  114,  114,  114,
      114,   59,   64,  114,  114,  114,  114,  114,  114,  114,
       60,  114,  113,  115,    0,  115,   93,  115,   94,  115,

      115,  115,  115,    0,  115,   54,  115,  115,  115,  115,
      115,  114,  114,  114,   86,   42,  114,  114,  114,   88,
      114,  114,  114,  114,   56,  114,  114,  114,  114,   28,
      114,  114,  114,  113,  115,   34,   92,  115,   70,  115,
       69,  115,   66,   65,   36,  115,  115,   71,  108,  115,
      115,  114,  114,  114,   39,  114,  114,  114,  114,  114,
      114,   61,  114,  114,  114,  114,  114,  114,   67,  115,
      115,   90,  115,   91,  115,  115,  115,  115,  115,   76,
       33,   21,  114,  114,   40,   23,   99,   38,  114,  114,
      114,  114,  114,  114,  114,  114,  115,   89,  115,  115,

      104,   72,  115,  115,   68,  114,  114,   80,  114,   31,
      114,   22,  114,  114,  114,  115,  115,  105,  115,  115,
      106,  114,  114,  114,  114,  114,  114,  115,  109,  115,
      115,  114,  114,   32,   20,  114,  114,  112,  115,  115,
      114,  114,   62,  114,  111,  115,  114,  114,   87,  110,
       30,   63,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,   10,
       11,   12,   13,    1,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       24,   25,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,    1,   54,    1,   55,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    1,    2,    3,    1,    3,    3,    3,    3,    1,
        1,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    1,    1,    1,    3,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    3,    3
    } ;

static const short int yy_base[563] =
    {   0,
        0,    0,  974, 1838,  970, 1838,   51,  915, 1838, 1838,
     1838, 1838,  943, 1838,   42,   50,    0,  934, 1838,  931,
      920, 1838, 1838,  100,  152,   23,   87,   91,  142,   27,
      164,  102,  133,  106,  155,  173,  182,  191,  948,  106,
     1838,  115, 1838,   46,  930,  235,  287,   93,  223,  224,
      234,  194,  231,  238,  242,  275,  283,  286,  179,  292,
      293,  294,  300,  315,    0, 1838, 1838,  358,  410,    0,
      308,  339,  351,  312,  354,  363,  399,  402,  413,  427,
      430,  439,  442,  451,  461,  465,  474,  477,  487,  490,
      499,  503,  515,  524,  512,  527,  536,  539,  550,  560,

      563,  170,  920,    0,  116,  187,  228,  251,  375,  304,
      549,  330,  398,  404,  357,  568,  421,  471,  457,  575,
      570,  502,  582,  463,  573,  588,  587,  369,  592,  595,
      602,  605,  426,  612,  530,  606,  615,    0,  881,   27,
      625,  628,  637,  624,  206,  640,  649,  661,  652,  670,
      673,  682,  685,  694,  697,  706,  709,  879,  721,  725,
      734,  745,  748,  757,  768,  771,  780,  784,  796,  800,
      812,  809,  822,  733,  542,  834,  824,  616,  755,  407,
      799,  806,  712,  832,  509,  688,  837,  655,  841,  845,
      719,  846,  855,  700,  849,  803,  854,  866,  844,  869,

      863,  872,  875,  876,  877,  896,  881,  887,  884,  889,
      238,  893,  897,  879,  861,  834,  796,  907,  917,  920,
      929,  939,  942,  951,  955,  964,  967,  977,  792,  981,
      990,  993, 1002, 1006, 1015, 1018, 1027, 1030, 1039, 1042,
     1051, 1054, 1063,  927,  947, 1075, 1061, 1012, 1021, 1076,
     1073,  949, 1083, 1085,  954,  969, 1086,  961, 1088, 1033,
     1093, 1097, 1095, 1098, 1110, 1105, 1107, 1118, 1117, 1119,
     1124, 1120, 1132, 1139,  790, 1125, 1129, 1142,  262, 1135,
     1145,  782,  783,  780,  760, 1148, 1162, 1165, 1174, 1177,
     1186, 1189, 1198, 1201, 1210, 1213,  763, 1222, 1226, 1235,

      108, 1238, 1254, 1250, 1263, 1267, 1276, 1280, 1289, 1225,
     1147, 1153, 1301, 1168, 1288, 1302, 1303, 1294, 1180, 1204,
     1248, 1308, 1307, 1315, 1320, 1325, 1312, 1326, 1329, 1332,
     1333, 1335, 1337, 1339, 1347,  760, 1346, 1350,  168, 1356,
     1359, 1838,  755,  753,  741, 1368, 1371, 1380, 1383, 1392,
     1395, 1404, 1407, 1416,  743, 1419, 1428, 1432,  739, 1444,
     1447,   74, 1456,  730, 1459, 1468, 1358, 1434, 1471, 1431,
     1474, 1480, 1386, 1483, 1398, 1488, 1500, 1410, 1489, 1503,
     1492, 1438, 1462, 1493, 1510, 1497, 1517, 1522, 1507, 1525,
     1531,  735,   23,  720,  692,  690,  711, 1519, 1540, 1537,

      687, 1550, 1553,  674, 1562, 1565,  668,  663, 1575,  668,
     1578, 1585, 1583, 1534, 1529, 1542, 1593, 1596, 1590, 1544,
     1603, 1605, 1607, 1610, 1572, 1613, 1615, 1624, 1616, 1620,
     1625,  653,  643,  336,  646, 1838,  663,  294, 1628,  627,
     1637,  618, 1640, 1649, 1838, 1652,  613,    0, 1663,  615,
     1666, 1627, 1634, 1662, 1655, 1686, 1676, 1681, 1684, 1688,
     1685, 1706, 1693, 1694, 1712, 1713,  622,  603,  595,  584,
      552,    0,  549,    0,  537, 1714,  500,  379,  495, 1710,
     1691, 1717, 1718,  494, 1720, 1724, 1732, 1737, 1738,  480,
     1741, 1743, 1742, 1745,  469,  451,  460,    0,  452,  430,

     1735,    0,  424,  404,    0, 1747,  403, 1750,  379, 1760,
     1762, 1764, 1765,  362,  366,  352,  349,    0,  322,  324,
     1767,  301,  286, 1768, 1769,  271,  270,  257,    0,  255,
      243,  231,  225, 1770, 1771,  200,  190,    0,  168,  145,
      144,  129,    0,  124,    0,  131,  116,   89,    0,    0,
        0,    0, 1838, 1817, 1821,  114, 1823, 1825, 1827, 1829,
     1831, 1833
    } ;

static const short int yy_def[563] =
    {   0,
      553,    1,  553,  553,  553,  553,  554,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  555,  553,  553,  553,
      556,  553,  553,  557,  557,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  553,  554,
      553,  554,  553,  553,  553,  558,  558,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,  555,  553,  553,  559,  559,  560,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,  554,  553,  561,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,  562,   69,   69,
       25,   25,   25,  553,  560,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  560,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       69,   25,   25,  553,  553,  560,  560,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,  560,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,  561,   47,   47,   47,   69,   25,
       25,  553,  553,  560,  560,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  560,   25,   25,   25,

      553,   25,   25,   25,   25,   25,   25,   25,   25,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,  561,   47,   47,   69,   25,
       25,  553,  553,  560,  560,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  560,   25,   25,   25,  553,   25,
       25,  560,   25,  560,   25,   25,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,  561,   69,  560,  553,  560,  560,   25,   25,   25,

      560,   25,   25,  553,   25,   25,  560,  560,   25,  560,
       25,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,  561,  561,   69,  560,  553,  560,  560,   25,  560,
       25,  560,   25,   25,  553,   25,  560,  560,   25,  560,
       25,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,  561,  561,   69,  560,
      560,  560,  560,  560,  560,   25,  560,  560,  560,   25,
       47,   47,   47,  561,   47,   47,   47,   47,   47,  561,
       47,   47,   47,   47,  561,  561,  560,  560,  560,  560,

       25,  560,  560,  560,  560,   47,  561,   47,  561,   47,
       47,   47,   47,  561,  561,  560,  560,  560,  560,  560,
       47,  561,  561,   47,   47,  561,  561,  560,  560,  560,
      560,  561,  561,   47,   47,  561,  561,  560,  560,  560,
      561,  561,  561,  561,  560,  560,  561,  561,  561,  560,
      561,  561,    0,  553,  553,  553,  553,  553,  553,  553,
      553,  553
    } ;

static const short int yy_nxt[1894] =
    {   0,
        4,    5,    6,    4,    7,    8,    4,    4,    4,    9,
       10,   11,   12,   13,    4,   14,   15,   16,   17,   18,
       19,   20,   21,   22,    4,   23,   24,   25,   24,   26,
       27,   28,   29,   24,   24,   30,   24,   24,   24,   31,
       32,   33,   34,   24,   24,   35,   36,   37,   24,   38,
       24,   24,   24,    4,    4,   41,   45,   76,   44,   83,
       45,   71,   44,   71,  434,   71,   84,   85,   71,   71,
      139,  211,   86,   71,  139,   42,   46,   47,   46,   48,
       49,   50,   51,   52,   53,   54,   46,   55,   56,   57,
       58,   59,   60,   46,   61,   62,   63,   46,   64,   46,

       46,   46,   46,   70,  407,   70,   70,   70,   70,  301,
       41,   70,   70,   70,   70,   70,   70,   68,   77,  102,
       70,  408,  105,  552,   70,   71,   79,   71,   78,   71,
       42,   71,   71,   71,  108,  359,   71,   71,  105,   42,
       71,   80,   71,   89,   71,  105,   71,   71,   71,   90,
       93,   71,   71,   70,   70,   70,  551,   70,   70,   70,
       70,  105,  550,   70,   70,   70,   70,   70,   70,   81,
      549,   71,   70,   71,   41,  548,   70,   91,   71,   71,
       71,   92,   71,   82,   94,  547,   95,   71,   71,  546,
       72,   87,   73,   71,   42,   71,   96,   74,   75,   88,

       71,   71,   71,  393,   71,   70,   70,  128,  105,   71,
       71,   71,  545,   71,   97,  139,  105,   98,   71,   71,
       71,  129,   99,  105,  105,  100,  101,   71,   71,   71,
      544,   71,  105,  174,  543,  118,   71,   71,  104,  105,
      104,  104,  104,  104,  216,  217,  104,  104,  104,  104,
      104,  104,  105,  105,  109,  104,  112,  105,  542,  104,
      105,  115,  119,  105,  110,  279,  541,  105,  105,  105,
      111,  105,  113,  175,  114,  116,  105,  122,  120,  105,
      105,  117,  121,  105,  540,  139,  539,  105,  104,  104,
      104,  176,  104,  104,  104,  104,  105,  538,  104,  104,

      104,  104,  104,  104,  105,  537,  123,  104,  339,  139,
      124,  104,  105,  127,  125,  105,  106,  536,  126,  130,
      105,  105,  105,  105,  133,  134,  533,  135,  105,  105,
      131,  105,  107,  105,  472,  473,  132,  105,  105,  105,
      104,  104,  137,  178,  105,  105,   71,  532,   71,  105,
       71,  136,   71,   71,   71,  144,  531,  143,   71,  105,
      105,  138,  180,  138,  138,  138,  138,  145,  530,  138,
      138,  138,  138,  138,  138,  105,  469,   71,  138,   71,
      529,  142,  138,  139,   71,   71,  183,  528,  141,   71,
      146,   71,   71,  527,   71,  526,   71,   71,  105,   71,

       71,   71,  105,   71,  105,  198,  503,  504,   71,   71,
      523,  138,  138,  138,  105,  138,  138,  138,  138,  177,
      105,  138,  138,  138,  138,  138,  138,  105,  147,  181,
      138,  148,  522,  105,  138,  520,  105,   71,  252,   71,
       71,  149,   71,  105,   71,   71,  182,   71,   71,  105,
      105,   71,  105,   71,  151,  105,  519,  140,   71,  150,
      518,  185,  152,  138,  138,   71,  105,   71,  153,  204,
       71,  105,   71,   71,  155,   71,   71,   71,  158,   71,
       71,  517,   71,  154,   71,   71,  105,   71,   71,   71,
      157,   71,  105,  156,  516,  515,   71,   71,  186,   71,

      105,   71,  105,   71,  187,   71,   71,   71,  105,  514,
       71,   71,   71,  194,   71,   71,  105,  160,  509,   71,
       71,  507,   71,   71,  159,   71,  505,   71,   71,  162,
       71,  105,   71,  161,  163,   71,   71,   71,  257,   71,
      502,   71,  192,   71,   71,   71,  164,  105,   71,   71,
       71,  166,   71,   71,  105,   71,  165,   71,  167,  105,
       71,   71,   71,  207,   71,   71,  168,   71,  500,   71,
       71,  105,   71,   71,   71,  208,   71,   71,  105,   71,
      171,   71,  169,  245,   71,   71,  170,  105,   71,  499,
       71,  172,  498,  179,  105,   71,   71,  105,   71,  105,

       71,   71,  105,   71,  105,   71,   71,  188,   71,  173,
      189,  105,  184,  105,  191,  105,  105,  105,  105,  195,
      105,  105,  193,  190,  105,  144,  197,  105,  196,  201,
      497,  105,  105,  105,  105,  105,  202,  105,  199,  200,
      105,  105,  139,  250,  105,  105,  203,  105,  209,  496,
      105,  105,  212,  495,  479,  214,  205,  105,  206,  210,
      105,  105,  477,   71,  475,   71,   71,  474,   71,  215,
       71,   71,  213,   71,   71,   71,  471,   71,   71,  221,
      218,  470,   71,   71,  105,   71,   71,   71,  468,   71,
       71,  467,   71,  219,   71,   71,  220,   71,   71,   71,

      105,   71,  223,  450,  222,  448,   71,   71,   71,  447,
       71,   71,  445,   71,  442,   71,   71,  105,   71,   71,
       71,  226,   71,   71,  438,   71,  258,  224,   71,  105,
      225,   71,   71,  105,   71,   71,  437,   71,  436,   71,
       71,  105,   71,   71,  227,  105,   71,   71,  105,   71,
      262,   71,   71,  228,   71,   71,  230,  105,  255,   71,
      231,   71,  105,   71,  105,   71,   71,   71,  244,  435,
       71,   71,   71,  232,   71,  433,  410,  404,  105,   71,
       71,  401,  251,   71,  105,   71,   71,  397,   71,  234,
       71,   71,  233,   71,   71,   71,  235,   71,  396,  395,

      105,  392,   71,   71,  355,  345,   71,  344,   71,  236,
      343,   71,  342,   71,   71,  238,   71,   71,   71,  336,
       71,  237,   71,  239,   71,   71,   71,  297,  105,   71,
       71,  240,  105,  254,   71,  105,   71,  285,   71,  253,
       71,   71,   71,  241,  105,   71,   71,   71,  105,  242,
       71,  105,   71,  105,   71,   71,  243,   71,   71,  249,
       71,  105,   71,  105,  246,  284,  105,   71,   71,  105,
      105,  256,  261,  105,  105,  105,  263,  105,  105,  247,
      248,  259,  105,  105,  105,  266,  105,  260,  264,  105,
      105,  105,  105,  265,  105,  105,  268,  267,  105,  105,

      105,  270,  271,  269,  272,  105,  105,  283,  105,  275,
      105,  105,  274,  105,  105,  277,  105,  105,  105,  282,
      105,  105,  105,  273,  276,  105,  105,  229,  139,  105,
      281,   71,  105,   71,  278,   71,  103,   71,   71,   71,
      286,  105,   71,   71,  280,   71,  103,   71,  287,   39,
       69,   67,   71,   71,   66,   71,  105,   71,   71,   44,
      288,   43,   71,   71,  289,   71,   71,   71,  310,   71,
      290,   39,  105,  553,   71,   71,  311,   71,  318,   71,
       71,  553,   71,  105,   71,   71,  293,   71,  291,   71,
      105,   71,  105,   71,  105,   71,   71,  292,  105,  105,

       71,   71,  294,  301,   71,   71,  105,   71,  296,   71,
       71,  553,   71,   71,  105,   71,  321,   71,  295,   71,
      298,   71,   71,   71,  300,  553,   71,   71,   71,  299,
       71,   71,  553,   71,  553,   71,   71,  302,   71,   71,
       71,  105,   71,  314,   71,  553,   71,   71,   71,  304,
      105,   71,   71,  303,  553,   71,   71,  105,   71,  305,
       71,   71,  105,   71,   71,   71,  105,   71,   71,  315,
       71,  553,   71,   71,  553,   71,  306,  307,  105,   71,
       71,  553,   71,  308,   71,   71,  553,   71,   71,   71,
      105,   71,   71,  553,   71,  553,   71,   71,  309,   71,

       71,   71,  105,   71,  105,  105,  105,  313,   71,   71,
      312,  316,  105,  553,  105,  105,  553,  105,  105,  317,
      105,  105,  105,  323,  105,  320,  105,  105,  105,  319,
      105,  105,  322,  105,  105,  325,  328,  324,  105,  105,
      105,  553,  105,  105,  326,  327,  105,  105,  105,  105,
      105,  333,  105,  105,  105,  105,  329,  330,  105,  332,
      331,  105,  105,  105,  105,  105,  335,  334,  105,  105,
      337,  105,  553,   71,  338,   71,  105,  105,  553,  346,
      340,   71,  105,   71,  105,  341,   71,  105,   71,  347,
       71,   71,  105,   71,   71,  553,  348,  105,  105,  368,

       71,  553,   71,   71,  553,   71,  553,   71,   71,  105,
       71,   71,   71,  105,  349,   71,  553,   71,  371,   71,
       71,  350,   71,   71,  351,  105,   71,   71,  553,   71,
      553,   71,   71,  105,  352,   71,   71,  553,   71,  353,
      354,   71,  553,   71,   71,  553,   71,   71,   71,  376,
       71,   71,  553,   71,  105,   71,   71,  356,   71,   71,
       71,  357,   71,  362,   71,  367,   71,   71,   71,  553,
      105,   71,   71,   71,  553,   71,   71,  105,   71,  358,
       71,   71,  360,   71,   71,  361,  377,  553,   71,  364,
       71,  553,   71,  105,   71,   71,   71,  553,  553,   71,

       71,   71,  363,   71,  553,   71,  553,   71,   71,   71,
      553,  553,   71,   71,   71,  365,   71,  105,   71,  372,
       71,   71,   71,  105,  553,   71,   71,   71,  369,  366,
      105,  105,  105,  105,   71,   71,  105,  105,  374,  105,
      375,  383,  373,  378,  105,  370,  105,  105,  105,  105,
      380,  381,  379,  105,  105,  105,  553,  105,  105,  382,
      105,  105,  105,  386,  388,  105,  105,  385,  105,  394,
      105,  105,  384,  387,  105,  105,  105,  105,  105,  105,
      105,  553,  389,  390,  105,  391,  553,  105,  553,  553,
      553,  105,  105,  553,   71,  105,   71,   71,  553,   71,

      553,   71,   71,  105,   71,   71,   71,  553,   71,   71,
      553,   71,  553,   71,   71,  105,  398,   71,   71,  553,
       71,   71,  553,   71,  553,   71,   71,  105,   71,   71,
       71,  105,   71,   71,  553,   71,  553,   71,   71,  105,
       71,   71,   71,  105,   71,   71,  399,   71,  553,   71,
       71,  421,   71,   71,   71,  105,   71,   71,  414,   71,
      105,  400,   71,  105,   71,   71,   71,  105,   71,  412,
       71,  402,   71,   71,   71,  405,  105,   71,   71,  105,
      403,  553,   71,  105,   71,   71,  406,   71,  553,   71,
       71,  105,   71,   71,   71,  409,   71,   71,  553,  411,

      105,   71,   71,  105,   71,   71,   71,  105,   71,  105,
      416,  413,  105,   71,   71,  553,  105,  105,  105,  105,
      415,  105,  105,  419,  417,  105,  105,  420,  105,  105,
      423,  418,  105,  105,  105,  422,  105,  105,  425,  105,
      424,  426,  105,  427,  432,  105,  105,  428,  105,  429,
      439,  105,  430,  440,  105,  105,  431,   71,  105,   71,
      105,  553,  105,  105,   71,   71,  553,  105,  441,  454,
      105,  105,  553,  105,  105,   71,  105,   71,   71,  105,
       71,  443,   71,   71,  444,   71,   71,  105,   71,  105,
       71,   71,  553,   71,  553,   71,   71,  553,   71,   71,

       71,  105,  446,   71,  553,   71,  449,   71,   71,  451,
       71,   71,  105,   71,  105,   71,   71,  105,   71,  105,
       71,   71,  105,   71,   71,  105,  452,  456,  105,  453,
      105,  457,  105,  455,  105,  105,  105,  461,  105,  105,
      459,  105,  105,  458,  105,  105,  463,  460,  105,  105,
      105,  462,  105,  105,  105,  105,  105,  553,  105,  464,
      105,  105,  465,  105,  466,  105,   71,  481,   71,  105,
      105,  553,  105,   71,   71,   71,  478,   71,   71,  482,
       71,  476,   71,   71,  105,   71,   71,   71,  553,   71,
       71,  105,   71,  553,   71,   71,  480,   71,   71,  484,

      105,   71,  483,   71,   71,  105,   71,  105,   71,   71,
      105,   71,   71,  487,  105,  105,  485,  105,  553,  490,
      105,  105,  105,  105,  553,  489,  486,  553,  553,  105,
      105,  105,  553,  105,  488,  105,  105,  491,  105,  105,
      492,  105,  105,  493,  494,  501,  105,  105,   71,  105,
       71,  105,   71,  105,   71,   71,   71,  105,  105,   71,
       71,  105,  105,  105,  506,  105,  105,  105,  553,  105,
      105,  105,  105,   71,  105,   71,  105,  105,  511,  105,
       71,   71,  105,  105,  508,  513,  510,  512,  105,  105,
      105,  105,  521,  105,  105,  105,  105,  105,  105,  105,

      105,  553,  553,  524,  553,  105,  553,  105,  534,  105,
      105,  525,  105,  105,  535,  105,  105,   40,   40,   40,
       40,   65,  553,   65,   65,   71,   71,  105,  105,  139,
      139,   70,   70,  104,  104,  138,  138,    3,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553

    } ;

static const short int yy_chk[1894] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    7,   15,   26,   15,   30,
       44,   26,   44,   26,  393,   30,   30,   30,   26,   26,
      393,  140,   30,   30,  140,    7,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   24,  362,   24,   24,   24,   24,  301,
       40,   24,   24,   24,   24,   24,   24,  556,   27,   42,
       24,  362,   48,  548,   24,   27,   28,   27,   27,   28,
       40,   28,   27,   27,   48,  301,   28,   28,   48,   42,
       32,   28,   32,   32,   34,  105,   34,   32,   32,   32,
       34,   34,   34,   24,   24,   25,  547,   25,   25,   25,
       25,  105,  546,   25,   25,   25,   25,   25,   25,   29,
      544,   33,   25,   33,  102,  542,   25,   33,   33,   33,
       29,   33,   29,   29,   35,  541,   35,   29,   29,  540,
       25,   31,   25,   35,  102,   35,   35,   25,   25,   31,

       35,   35,   31,  339,   31,   25,   25,   59,   59,   31,
       31,   36,  539,   36,   36,  339,  106,   36,   36,   36,
       37,   59,   37,   52,   59,   38,   38,   37,   37,   38,
      537,   38,  106,  106,  536,   52,   38,   38,   46,   52,
       46,   46,   46,   46,  145,  145,   46,   46,   46,   46,
       46,   46,   49,   50,   49,   46,   50,  107,  533,   46,
       53,   51,   53,   51,   49,  211,  532,   54,   49,   50,
       49,   55,   50,  107,   50,   51,   53,   55,   54,   51,
      108,   51,   54,   54,  531,  211,  530,   55,   46,   46,
       47,  108,   47,   47,   47,   47,  108,  528,   47,   47,

       47,   47,   47,   47,   56,  527,   56,   47,  279,  279,
       57,   47,   57,   58,   57,   58,   47,  526,   57,   60,
       56,   60,   61,   62,   61,   62,  523,   63,   57,   63,
       60,   58,   47,  110,  438,  438,   60,   60,   61,   62,
       47,   47,   64,  110,   64,   63,   71,  522,   71,  110,
       74,   63,   74,   71,   71,   75,  520,   74,   74,  112,
       64,   68,  112,   68,   68,   68,   68,   75,  519,   68,
       68,   68,   68,   68,   68,  112,  434,   72,   68,   72,
      517,   73,   68,  434,   72,   72,  115,  516,   72,   73,
       76,   73,   75,  515,   75,  514,   73,   73,  128,   75,

       75,   76,  115,   76,  109,  128,  478,  478,   76,   76,
      509,   68,   68,   69,  128,   69,   69,   69,   69,  109,
      109,   69,   69,   69,   69,   69,   69,  113,   77,  113,
       69,   77,  507,  114,   69,  504,  180,   77,  180,   77,
       78,   78,   78,  113,   77,   77,  114,   78,   78,  114,
      117,   79,  180,   79,   80,  133,  503,   69,   79,   79,
      500,  117,   80,   69,   69,   80,  117,   80,   81,  133,
       81,  133,   80,   80,   83,   81,   81,   82,   86,   82,
       83,  499,   83,   82,   82,   82,  119,   83,   83,   84,
       85,   84,  124,   84,  497,  496,   84,   84,  118,   85,

      118,   85,  119,   86,  119,   86,   85,   85,  124,  495,
       86,   86,   87,  124,   87,   88,  118,   88,  490,   87,
       87,  484,   88,   88,   87,   89,  479,   89,   90,   90,
       90,  122,   89,   89,   92,   90,   90,   91,  185,   91,
      477,   92,  122,   92,   91,   91,   93,  122,   92,   92,
       95,   94,   95,   93,  185,   93,   93,   95,   95,  135,
       93,   93,   94,  135,   94,   96,   96,   96,  475,   94,
       94,  175,   96,   96,   97,  135,   97,   98,  111,   98,
       99,   97,   97,  175,   98,   98,   98,  175,   99,  473,
       99,  100,  471,  111,  111,   99,   99,  116,  100,  121,

      100,  101,  125,  101,  120,  100,  100,  120,  101,  101,
      120,  123,  116,  116,  121,  121,  127,  126,  125,  125,
      120,  129,  123,  120,  130,  144,  127,  123,  126,  131,
      470,  131,  127,  126,  132,  136,  132,  129,  129,  130,
      130,  134,  469,  178,  137,  178,  132,  131,  136,  468,
      132,  136,  141,  467,  450,  144,  134,  134,  134,  137,
      137,  178,  447,  141,  442,  141,  142,  440,  142,  144,
      141,  141,  143,  142,  142,  143,  437,  143,  146,  149,
      146,  435,  143,  143,  188,  146,  146,  147,  433,  147,
      149,  432,  149,  147,  147,  147,  148,  149,  149,  148,

      188,  148,  151,  410,  150,  408,  148,  148,  150,  407,
      150,  151,  404,  151,  401,  150,  150,  186,  151,  151,
      152,  154,  152,  153,  397,  153,  186,  152,  152,  194,
      153,  153,  154,  186,  154,  155,  396,  155,  395,  154,
      154,  183,  155,  155,  156,  194,  156,  157,  191,  157,
      191,  156,  156,  157,  157,  157,  159,  183,  183,  159,
      160,  159,  174,  160,  191,  160,  159,  159,  174,  394,
      160,  160,  161,  162,  161,  392,  364,  359,  174,  161,
      161,  355,  179,  162,  179,  162,  163,  345,  163,  164,
      162,  162,  163,  163,  163,  164,  165,  164,  344,  343,

      179,  336,  164,  164,  297,  285,  165,  284,  165,  166,
      283,  166,  282,  165,  165,  168,  166,  166,  167,  275,
      167,  167,  168,  169,  168,  167,  167,  229,  181,  168,
      168,  170,  196,  182,  169,  182,  169,  217,  170,  181,
      170,  169,  169,  171,  181,  170,  170,  172,  196,  172,
      171,  182,  171,  177,  172,  172,  173,  171,  171,  177,
      173,  184,  173,  176,  176,  216,  187,  173,  173,  177,
      189,  184,  190,  199,  190,  192,  192,  184,  195,  176,
      176,  187,  187,  197,  193,  197,  189,  189,  193,  199,
      190,  192,  201,  195,  195,  198,  200,  198,  200,  197,

      193,  202,  202,  201,  203,  204,  205,  215,  201,  206,
      207,  198,  205,  209,  200,  209,  208,  202,  210,  214,
      203,  204,  205,  204,  208,  206,  207,  158,  139,  209,
      213,  212,  208,  212,  210,  213,  103,  213,  212,  212,
      218,  206,  213,  213,  212,  218,   45,  218,  219,   39,
       21,   20,  218,  218,   18,  219,  244,  219,  220,   13,
      220,    8,  219,  219,  221,  220,  220,  221,  244,  221,
      222,    5,  244,    3,  221,  221,  245,  222,  252,  222,
      223,    0,  223,  255,  222,  222,  225,  223,  223,  224,
      258,  224,  245,  225,  252,  225,  224,  224,  256,  255,

      225,  225,  226,  233,  226,  227,  258,  227,  228,  226,
      226,    0,  227,  227,  256,  228,  256,  228,  227,  230,
      230,  230,  228,  228,  232,    0,  230,  230,  231,  231,
      231,  232,    0,  232,    0,  231,  231,  234,  232,  232,
      233,  248,  233,  248,  234,    0,  234,  233,  233,  236,
      249,  234,  234,  235,    0,  235,  236,  248,  236,  237,
      235,  235,  260,  236,  236,  237,  249,  237,  238,  249,
      238,    0,  237,  237,    0,  238,  238,  239,  260,  239,
      240,    0,  240,  241,  239,  239,    0,  240,  240,  241,
      247,  241,  242,    0,  242,    0,  241,  241,  243,  242,

      242,  243,  251,  243,  246,  250,  247,  247,  243,  243,
      246,  250,  253,    0,  254,  257,    0,  259,  251,  251,
      246,  250,  261,  259,  263,  254,  262,  264,  253,  253,
      254,  257,  257,  259,  266,  262,  267,  261,  261,  265,
      263,    0,  262,  264,  264,  265,  269,  268,  270,  272,
      266,  272,  267,  271,  276,  265,  268,  268,  277,  271,
      270,  273,  269,  268,  270,  272,  274,  273,  274,  271,
      276,  278,    0,  280,  277,  280,  311,  273,    0,  286,
      280,  280,  312,  281,  274,  281,  286,  278,  286,  287,
      281,  281,  311,  286,  286,    0,  288,  314,  312,  312,

      287,    0,  287,  288,    0,  288,    0,  287,  287,  319,
      288,  288,  289,  314,  289,  290,    0,  290,  314,  289,
      289,  290,  290,  290,  291,  319,  291,  292,    0,  292,
        0,  291,  291,  320,  292,  292,  293,    0,  293,  294,
      296,  294,    0,  293,  293,    0,  294,  294,  295,  320,
      295,  296,    0,  296,  310,  295,  295,  298,  296,  296,
      298,  299,  298,  304,  299,  310,  299,  298,  298,    0,
      310,  299,  299,  300,    0,  300,  302,  321,  302,  300,
      300,  300,  302,  302,  302,  303,  321,    0,  304,  307,
      304,    0,  303,  321,  303,  304,  304,    0,    0,  303,

      303,  305,  306,  305,    0,  306,    0,  306,  305,  305,
        0,    0,  306,  306,  307,  308,  307,  315,  308,  315,
      308,  307,  307,  318,    0,  308,  308,  309,  313,  309,
      313,  316,  317,  315,  309,  309,  323,  322,  317,  318,
      318,  327,  316,  322,  324,  313,  313,  316,  317,  325,
      324,  325,  323,  322,  326,  328,    0,  327,  329,  326,
      324,  330,  331,  330,  332,  325,  333,  329,  334,  340,
      326,  328,  328,  331,  329,  337,  335,  330,  331,  338,
      332,    0,  333,  334,  334,  335,    0,  367,    0,    0,
        0,  337,  335,    0,  340,  338,  340,  341,    0,  341,

        0,  340,  340,  367,  341,  341,  346,    0,  346,  347,
        0,  347,    0,  346,  346,  373,  347,  347,  348,    0,
      348,  349,    0,  349,    0,  348,  348,  375,  349,  349,
      350,  373,  350,  351,    0,  351,    0,  350,  350,  378,
      351,  351,  352,  375,  352,  353,  351,  353,    0,  352,
      352,  378,  353,  353,  354,  378,  354,  356,  370,  356,
      370,  354,  354,  368,  356,  356,  357,  382,  357,  368,
      358,  356,  358,  357,  357,  360,  370,  358,  358,  368,
      357,    0,  360,  382,  360,  361,  361,  361,    0,  360,
      360,  383,  361,  361,  363,  363,  363,  365,    0,  365,

      369,  363,  363,  371,  365,  365,  366,  383,  366,  372,
      372,  369,  374,  366,  366,    0,  369,  376,  379,  371,
      371,  381,  384,  376,  374,  372,  386,  377,  374,  377,
      380,  374,  380,  376,  379,  379,  389,  381,  384,  385,
      381,  385,  386,  386,  391,  377,  387,  387,  380,  388,
      398,  388,  389,  399,  390,  385,  390,  398,  415,  398,
      391,    0,  387,  414,  398,  398,    0,  388,  400,  414,
      390,  416,    0,  420,  415,  400,  391,  400,  399,  414,
      399,  402,  400,  400,  403,  399,  399,  416,  402,  420,
      402,  403,    0,  403,    0,  402,  402,    0,  403,  403,

      405,  425,  405,  406,    0,  406,  409,  405,  405,  411,
      406,  406,  413,  409,  412,  409,  411,  425,  411,  419,
      409,  409,  417,  411,  411,  418,  412,  418,  413,  413,
      412,  419,  421,  417,  422,  419,  423,  424,  417,  424,
      422,  418,  426,  421,  427,  429,  427,  423,  421,  430,
      422,  426,  423,  428,  431,  424,  452,    0,  426,  428,
      427,  429,  429,  453,  431,  430,  439,  452,  439,  428,
      431,    0,  452,  439,  439,  441,  449,  441,  443,  453,
      443,  446,  441,  441,  455,  443,  443,  444,    0,  444,
      446,  454,  446,    0,  444,  444,  451,  446,  446,  456,

      455,  449,  454,  449,  451,  457,  451,  454,  449,  449,
      458,  451,  451,  459,  461,  456,  457,  460,    0,  462,
      481,  457,  463,  464,    0,  461,  458,    0,    0,  459,
      461,  456,    0,  460,  460,  462,  481,  463,  463,  464,
      464,  465,  466,  465,  466,  476,  482,  483,  480,  485,
      480,  462,  476,  486,  476,  480,  480,  465,  466,  476,
      476,  487,  482,  483,  483,  485,  488,  489,    0,  486,
      491,  493,  492,  501,  494,  501,  506,  487,  492,  508,
      501,  501,  488,  489,  489,  494,  491,  493,  492,  510,
      494,  511,  506,  512,  513,  508,  521,  524,  525,  534,

      535,    0,    0,  511,    0,  510,    0,  511,  524,  512,
      513,  513,  521,  524,  525,  534,  535,  554,  554,  554,
      554,  555,    0,  555,  555,  557,  557,  558,  558,  559,
      559,  560,  560,  561,  561,  562,  562,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553

    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_PDDL_Scanner_DEBUG != 0
static const short int yy_rule_linenum[118] =
    {   0,
       39,   40,   41,   43,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  144,  145,  146,

      147,  148,  150,  151,  152,  154,  155,  156,  157,  158,
      159,  160,  162,  170,  175,  208,  209
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "/usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_PDDL_Scanner_LEX_DEFINED
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM )
YY_PDDL_Scanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_PDDL_Scanner_LEX_RETURN YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LEX ( YY_PDDL_Scanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "/usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_PDDL_Scanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_PDDL_Scanner_OFILE_DEFAULT;

	if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, yy___in );
	else
	    YY_PDDL_Scanner_CURRENT_BUFFER = YY_PDDL_Scanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_PDDL_Scanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "/usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 554 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 553 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "/usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "/usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_PDDL_Scanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_PDDL_Scanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 39 "pddl2.lex"
;
	YY_BREAK
case 2:
#line 40 "pddl2.lex"
;
	YY_BREAK
case 3:
#line 41 "pddl2.lex"
{ _line_no++; if (_trace_line) std::cerr << std::endl << "LINE: " << _line_no << std::endl; }
	YY_BREAK
case 4:
#line 43 "pddl2.lex"
{
  val.sval = strndup(yytext + 1, strlen(yytext) - 2);
  return PDDL_Parser::TK_STRING;
}
	YY_BREAK
case 5:
#line 48 "pddl2.lex"
{return PDDL_Parser::TK_OPEN;}
	YY_BREAK
case 6:
#line 49 "pddl2.lex"
{return PDDL_Parser::TK_CLOSE;}
	YY_BREAK
case 7:
#line 50 "pddl2.lex"
{return PDDL_Parser::TK_OPEN_SQ;}
	YY_BREAK
case 8:
#line 51 "pddl2.lex"
{return PDDL_Parser::TK_CLOSE_SQ;}
	YY_BREAK
case 9:
#line 52 "pddl2.lex"
{return PDDL_Parser::TK_PLUS;}
	YY_BREAK
case 10:
#line 53 "pddl2.lex"
{return PDDL_Parser::TK_HYPHEN;}
	YY_BREAK
case 11:
#line 54 "pddl2.lex"
{return PDDL_Parser::TK_MUL;}
	YY_BREAK
case 12:
#line 55 "pddl2.lex"
{return PDDL_Parser::TK_DIV;}
	YY_BREAK
case 13:
#line 56 "pddl2.lex"
{return PDDL_Parser::TK_GREATER;}
	YY_BREAK
case 14:
#line 57 "pddl2.lex"
{return PDDL_Parser::TK_GREATEQ;}
	YY_BREAK
case 15:
#line 58 "pddl2.lex"
{return PDDL_Parser::TK_LESS;}
	YY_BREAK
case 16:
#line 59 "pddl2.lex"
{return PDDL_Parser::TK_LESSEQ;}
	YY_BREAK
case 17:
#line 60 "pddl2.lex"
{return PDDL_Parser::TK_COLON;}
	YY_BREAK
case 18:
#line 61 "pddl2.lex"
{return PDDL_Parser::TK_HASHT;}
	YY_BREAK
case 19:
#line 62 "pddl2.lex"
{return PDDL_Parser::TK_EQ;}
	YY_BREAK
case 20:
#line 64 "pddl2.lex"
{return PDDL_Parser::KW_REQS;}
	YY_BREAK
case 21:
#line 65 "pddl2.lex"
{return PDDL_Parser::KW_CONSTANTS;}
	YY_BREAK
case 22:
#line 66 "pddl2.lex"
{return PDDL_Parser::KW_PREDS;}
	YY_BREAK
case 23:
#line 67 "pddl2.lex"
{return PDDL_Parser::KW_FUNS;}
	YY_BREAK
case 24:
#line 68 "pddl2.lex"
{return PDDL_Parser::KW_TYPES;}
	YY_BREAK
case 25:
#line 69 "pddl2.lex"
{return PDDL_Parser::KW_DEFINE;}
	YY_BREAK
case 26:
#line 70 "pddl2.lex"
{return PDDL_Parser::KW_DOMAIN;}
	YY_BREAK
case 27:
#line 71 "pddl2.lex"
{return PDDL_Parser::KW_ACTION;}
	YY_BREAK
case 28:
#line 72 "pddl2.lex"
{return PDDL_Parser::KW_PROCESS;}
	YY_BREAK
case 29:
#line 73 "pddl2.lex"
{return PDDL_Parser::KW_EVENT;}
	YY_BREAK
case 30:
#line 74 "pddl2.lex"
{return PDDL_Parser::KW_ACTION;}
	YY_BREAK
case 31:
#line 75 "pddl2.lex"
{return PDDL_Parser::KW_ARGS;}
	YY_BREAK
case 32:
#line 76 "pddl2.lex"
{return PDDL_Parser::KW_PRE;}
	YY_BREAK
case 33:
#line 77 "pddl2.lex"
{return PDDL_Parser::KW_COND;}
	YY_BREAK
case 34:
#line 78 "pddl2.lex"
{return PDDL_Parser::KW_AT_START;}
	YY_BREAK
case 35:
#line 79 "pddl2.lex"
{return PDDL_Parser::KW_AT_END;}
	YY_BREAK
case 36:
#line 80 "pddl2.lex"
{return PDDL_Parser::KW_OVER_ALL;}
	YY_BREAK
case 37:
#line 81 "pddl2.lex"
{return PDDL_Parser::KW_EFFECT;}
	YY_BREAK
case 38:
#line 82 "pddl2.lex"
{return PDDL_Parser::KW_INVARIANT;}
	YY_BREAK
case 39:
#line 83 "pddl2.lex"
{return PDDL_Parser::KW_DURATION;}
	YY_BREAK
case 40:
#line 84 "pddl2.lex"
{return PDDL_Parser::KW_EXPANSION;}
	YY_BREAK
case 41:
#line 85 "pddl2.lex"
{return PDDL_Parser::KW_TASKS;}
	YY_BREAK
case 42:
#line 86 "pddl2.lex"
{return PDDL_Parser::KW_DERIVED;}
	YY_BREAK
case 43:
#line 87 "pddl2.lex"
{return PDDL_Parser::KW_AND;}
	YY_BREAK
case 44:
#line 88 "pddl2.lex"
{return PDDL_Parser::KW_OR;}
	YY_BREAK
case 45:
#line 89 "pddl2.lex"
{return PDDL_Parser::KW_EXISTS;}
	YY_BREAK
case 46:
#line 90 "pddl2.lex"
{return PDDL_Parser::KW_FORALL;}
	YY_BREAK
case 47:
#line 91 "pddl2.lex"
{return PDDL_Parser::KW_IMPLY;}
	YY_BREAK
case 48:
#line 92 "pddl2.lex"
{return PDDL_Parser::KW_IFF;}
	YY_BREAK
case 49:
#line 93 "pddl2.lex"
{return PDDL_Parser::KW_NOT;}
	YY_BREAK
case 50:
#line 94 "pddl2.lex"
{return PDDL_Parser::KW_TRUE;}
	YY_BREAK
case 51:
#line 95 "pddl2.lex"
{return PDDL_Parser::KW_FALSE;}
	YY_BREAK
case 52:
#line 96 "pddl2.lex"
{return PDDL_Parser::KW_WHEN;}
	YY_BREAK
case 53:
#line 97 "pddl2.lex"
{return PDDL_Parser::KW_EITHER;}
	YY_BREAK
case 54:
#line 98 "pddl2.lex"
{return PDDL_Parser::KW_PROBLEM;}
	YY_BREAK
case 55:
#line 99 "pddl2.lex"
{return PDDL_Parser::KW_FORDOMAIN;}
	YY_BREAK
case 56:
#line 100 "pddl2.lex"
{return PDDL_Parser::KW_OBJECTS;}
	YY_BREAK
case 57:
#line 101 "pddl2.lex"
{return PDDL_Parser::KW_INIT;}
	YY_BREAK
case 58:
#line 102 "pddl2.lex"
{return PDDL_Parser::KW_GOAL;}
	YY_BREAK
case 59:
#line 103 "pddl2.lex"
{return PDDL_Parser::KW_LENGTH;}
	YY_BREAK
case 60:
#line 104 "pddl2.lex"
{return PDDL_Parser::KW_SERIAL;}
	YY_BREAK
case 61:
#line 105 "pddl2.lex"
{return PDDL_Parser::KW_PARALLEL;}
	YY_BREAK
case 62:
#line 106 "pddl2.lex"
{return PDDL_Parser::KW_SERIAL;}
	YY_BREAK
case 63:
#line 107 "pddl2.lex"
{return PDDL_Parser::KW_PARALLEL;}
	YY_BREAK
case 64:
#line 108 "pddl2.lex"
{return PDDL_Parser::KW_METRIC;}
	YY_BREAK
case 65:
#line 109 "pddl2.lex"
{return PDDL_Parser::KW_MINIMIZE;}
	YY_BREAK
case 66:
#line 110 "pddl2.lex"
{return PDDL_Parser::KW_MAXIMIZE;}
	YY_BREAK
case 67:
#line 111 "pddl2.lex"
{return PDDL_Parser::KW_DURATION_VAR;}
	YY_BREAK
case 68:
#line 112 "pddl2.lex"
{return PDDL_Parser::KW_TOTAL_TIME;}
	YY_BREAK
case 69:
#line 113 "pddl2.lex"
{return PDDL_Parser::KW_INCREASE;}
	YY_BREAK
case 70:
#line 114 "pddl2.lex"
{return PDDL_Parser::KW_DECREASE;}
	YY_BREAK
case 71:
#line 115 "pddl2.lex"
{return PDDL_Parser::KW_SCALE_UP;}
	YY_BREAK
case 72:
#line 116 "pddl2.lex"
{return PDDL_Parser::KW_SCALE_DOWN;}
	YY_BREAK
case 73:
#line 117 "pddl2.lex"
{return PDDL_Parser::KW_ASSIGN;}
	YY_BREAK
case 74:
#line 118 "pddl2.lex"
{return PDDL_Parser::KW_ASSIGN;}
	YY_BREAK
case 75:
#line 119 "pddl2.lex"
{return PDDL_Parser::KW_NUMBER;}
	YY_BREAK
case 76:
#line 120 "pddl2.lex"
{return PDDL_Parser::KW_UNDEFINED;}
	YY_BREAK
case 77:
#line 121 "pddl2.lex"
{return PDDL_Parser::KW_MINOP;}
	YY_BREAK
case 78:
#line 122 "pddl2.lex"
{return PDDL_Parser::KW_MAXOP;}
	YY_BREAK
case 79:
#line 124 "pddl2.lex"
{return PDDL_Parser::KW_INVARIANT;}
	YY_BREAK
case 80:
#line 125 "pddl2.lex"
{return PDDL_Parser::KW_IRRELEVANT;}
	YY_BREAK
case 81:
#line 126 "pddl2.lex"
{return PDDL_Parser::KW_NAME;}
	YY_BREAK
case 82:
#line 127 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 83:
#line 128 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 84:
#line 129 "pddl2.lex"
{return PDDL_Parser::KW_TAG;}
	YY_BREAK
case 85:
#line 130 "pddl2.lex"
{return PDDL_Parser::KW_VARS;}
	YY_BREAK
case 86:
#line 131 "pddl2.lex"
{return PDDL_Parser::KW_CONTEXT;}
	YY_BREAK
case 87:
#line 132 "pddl2.lex"
{return PDDL_Parser::KW_SET_CONSTRAINT;}
	YY_BREAK
case 88:
#line 133 "pddl2.lex"
{return PDDL_Parser::KW_FORMULA;}
	YY_BREAK
case 89:
#line 134 "pddl2.lex"
{return PDDL_Parser::KW_AT_LEAST_N;}
	YY_BREAK
case 90:
#line 135 "pddl2.lex"
{return PDDL_Parser::KW_AT_MOST_N;}
	YY_BREAK
case 91:
#line 136 "pddl2.lex"
{return PDDL_Parser::KW_EXACTLY_N;}
	YY_BREAK
case 92:
#line 137 "pddl2.lex"
{return PDDL_Parser::KW_AT_LEAST_N;}
	YY_BREAK
case 93:
#line 138 "pddl2.lex"
{return PDDL_Parser::KW_AT_MOST_N;}
	YY_BREAK
case 94:
#line 139 "pddl2.lex"
{return PDDL_Parser::KW_EXACTLY_N;}
	YY_BREAK
case 95:
#line 140 "pddl2.lex"
{return PDDL_Parser::KW_SETOF;}
	YY_BREAK
case 96:
#line 141 "pddl2.lex"
{return PDDL_Parser::KW_FACT;}
	YY_BREAK
case 97:
#line 142 "pddl2.lex"
{return PDDL_Parser::KW_ASSOC;}
	YY_BREAK
case 98:
#line 144 "pddl2.lex"
{return PDDL_Parser::KW_PLAN;}
	YY_BREAK
case 99:
#line 145 "pddl2.lex"
{return PDDL_Parser::KW_HEURISTIC;}
	YY_BREAK
case 100:
#line 146 "pddl2.lex"
{return PDDL_Parser::KW_OPT;}
	YY_BREAK
case 101:
#line 147 "pddl2.lex"
{return PDDL_Parser::KW_INF;}
	YY_BREAK
case 102:
#line 148 "pddl2.lex"
{return PDDL_Parser::KW_SET;}
	YY_BREAK
case 103:
#line 150 "pddl2.lex"
{return PDDL_Parser::KW_WITHIN;}
	YY_BREAK
case 104:
#line 151 "pddl2.lex"
{return PDDL_Parser::KW_PREFERENCE;}
	YY_BREAK
case 105:
#line 152 "pddl2.lex"
{return PDDL_Parser::KW_VIOLATED;}
	YY_BREAK
case 106:
#line 154 "pddl2.lex"
{ return PDDL_Parser::KW_CONSTRAINTS; }
	YY_BREAK
case 107:
#line 155 "pddl2.lex"
{ return PDDL_Parser::KW_ALWAYS; }
	YY_BREAK
case 108:
#line 156 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME; }
	YY_BREAK
case 109:
#line 157 "pddl2.lex"
{ return PDDL_Parser::KW_AT_MOST_ONCE; }
	YY_BREAK
case 110:
#line 158 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME_BEFORE; }
	YY_BREAK
case 111:
#line 159 "pddl2.lex"
{ return PDDL_Parser::KW_SOMETIME_AFTER; }
	YY_BREAK
case 112:
#line 160 "pddl2.lex"
{ return PDDL_Parser::KW_ALWAYS_WITHIN; }
	YY_BREAK
case 113:
#line 162 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_VAR_SYMBOL;
  if (((HSPS::PDDL_Base::Symbol*)val.sym->val)->sym_class == HSPS::PDDL_Base::sym_variable)
    return PDDL_Parser::TK_VAR_SYMBOL;
  return PDDL_Parser::TK_NEW_VAR_SYMBOL;
}
	YY_BREAK
case 114:
#line 170 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  return PDDL_Parser::TK_KEYWORD;
}
	YY_BREAK
case 115:
#line 175 "pddl2.lex"
{
  val.sym = _tab.inserta(yytext);
  if (val.sym->val == 0) return PDDL_Parser::TK_NEW_SYMBOL;
  else {
    if (yy_flex_debug) {
      HSPS::PDDL_Base::Symbol* s = (HSPS::PDDL_Base::Symbol*)val.sym->val;
      std::cerr << "symbol " << s->print_name
		<< " has class " << s->sym_class
		<< std::endl;
    }
    switch (((HSPS::PDDL_Base::Symbol*)val.sym->val)->sym_class) {
    case HSPS::PDDL_Base::sym_object:
      return PDDL_Parser::TK_OBJ_SYMBOL;
    case HSPS::PDDL_Base::sym_typename:
      return PDDL_Parser::TK_TYPE_SYMBOL;
    case HSPS::PDDL_Base::sym_predicate:
      return PDDL_Parser::TK_PRED_SYMBOL;
    case HSPS::PDDL_Base::sym_object_function:
      return PDDL_Parser::TK_OBJFUN_SYMBOL;
    case HSPS::PDDL_Base::sym_function:
      return PDDL_Parser::TK_FUN_SYMBOL;
    case HSPS::PDDL_Base::sym_action:
      return PDDL_Parser::TK_ACTION_SYMBOL;
    case HSPS::PDDL_Base::sym_preference:
      return PDDL_Parser::TK_PREFERENCE_SYMBOL;
    case HSPS::PDDL_Base::sym_set:
      return PDDL_Parser::TK_SET_SYMBOL;
    default:
      return PDDL_Parser::TK_MISC_SYMBOL;
    }
  }
}
	YY_BREAK
case 116:
#line 208 "pddl2.lex"
val.ival = atoi(yytext); return PDDL_Parser::TK_INT;
	YY_BREAK
case 117:
#line 209 "pddl2.lex"
val.rval = N_TO_NN(A_TO_N(yytext)); return PDDL_Parser::TK_FLOAT;
	YY_BREAK
case 118:
#line 211 "pddl2.lex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "/usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "/usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_PDDL_Scanner_DEBUG != 0
#ifndef YY_PDDL_Scanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_PDDL_Scanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_PDDL_Scanner_CHAR *dest = YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_PDDL_Scanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_PDDL_Scanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_PDDL_Scanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_PDDL_Scanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "/usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 554 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "/usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_PDDL_Scanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 554 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 553);
#line 755 "/usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_PDDL_Scanner_CHAR c, register YY_PDDL_Scanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_PDDL_Scanner_CHAR c;
register YY_PDDL_Scanner_CHAR *yy_bp;
#endif
#else
void YY_PDDL_Scanner_CLASS::yyunput( YY_PDDL_Scanner_CHAR c, YY_PDDL_Scanner_CHAR *yy_bp )
#endif

    {
    register YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_PDDL_Scanner_CHAR *dest =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_PDDL_Scanner_CHAR *source =
	    &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_PDDL_Scanner_CLASS::input()
#endif
    {
    int c;
    YY_PDDL_Scanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_PDDL_Scanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_PDDL_Scanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_RESTART( YY_PDDL_Scanner_IFILE  *input_file )
#else
void YY_PDDL_Scanner_RESTART( input_file )
YY_PDDL_Scanner_IFILE  *input_file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_RESTART ( YY_PDDL_Scanner_IFILE  *input_file )
#endif

    {
    YY_PDDL_Scanner_INIT_BUFFER( YY_PDDL_Scanner_CURRENT_BUFFER, input_file );
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_PDDL_Scanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_PDDL_Scanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_PDDL_Scanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_PDDL_Scanner_CURRENT_BUFFER = new_buffer;
    YY_PDDL_Scanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_LOAD_BUFFER_STATE( void )
#else
void YY_PDDL_Scanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_PDDL_Scanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_PDDL_Scanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_PDDL_Scanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CREATE_BUFFER( file, size )
YY_PDDL_Scanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_CREATE_BUFFER( YY_PDDL_Scanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_PDDL_Scanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_PDDL_Scanner_CREATE_BUFFER()" );

    YY_PDDL_Scanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_PDDL_Scanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_PDDL_Scanner_CURRENT_BUFFER )
	YY_PDDL_Scanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file )
#else
void YY_PDDL_Scanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_PDDL_Scanner_IFILE  *file;
#endif
#else
void YY_PDDL_Scanner_CLASS::YY_PDDL_Scanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_PDDL_Scanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 211 "pddl2.lex"


int yywrap() {
  return 1;
}

void PDDL_Scanner::open_file(const char* name, bool trace) {
  yy_flex_debug = trace;
  yyin = fopen(name, "r");
  if (!yyin) {
    std::cerr << "error: can't open " << name << std::endl;
    exit(255);
  }
  _filename = name;
  if (_reset) yy_init_buffer(YY_PDDL_Scanner_CURRENT_BUFFER, yyin);
  _reset = true;
  _line_no = 1;
  _trace_line = trace;
}

void PDDL_Scanner::close_file() {
  if (_filename != 0) {
    fclose(yyin);
    _filename = 0;
  }
}
